// <auto-generated />
using System;
using Games.Infrastructure.DataBase.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Games.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250922012727_SeedGames")]
    partial class SeedGames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Games.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("HourPlayed")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IndicatedAgeRating")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("GMS_Games", (string)null);
                });

            modelBuilder.Entity("Games.Domain.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("IdGame")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdGenre")
                        .HasColumnType("int");

                    b.HasKey("IdGame", "IdGenre");

                    b.HasIndex("IdGenre");

                    b.ToTable("GMS_GameGenres", (string)null);
                });

            modelBuilder.Entity("Games.Domain.Entities.GameLibrary", b =>
                {
                    b.Property<Guid>("IdLibrary")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdGame")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdLibrary", "IdGame");

                    b.HasIndex("IdGame");

                    b.ToTable("GMS_GamesLibrary", (string)null);
                });

            modelBuilder.Entity("Games.Domain.Entities.GenreTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GMS_GenreTypes", (string)null);
                });

            modelBuilder.Entity("Games.Domain.Entities.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GMS_Library", (string)null);
                });

            modelBuilder.Entity("Games.Domain.Entities.GameGenre", b =>
                {
                    b.HasOne("Games.Domain.Entities.Game", "Game")
                        .WithMany("Genres")
                        .HasForeignKey("IdGame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Games.Domain.Entities.GenreTypes", "GenreType")
                        .WithMany("GameGenres")
                        .HasForeignKey("IdGenre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GenreType");
                });

            modelBuilder.Entity("Games.Domain.Entities.GameLibrary", b =>
                {
                    b.HasOne("Games.Domain.Entities.Game", "Game")
                        .WithMany("GameLibraries")
                        .HasForeignKey("IdGame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Games.Domain.Entities.Library", "Library")
                        .WithMany("GameLibraries")
                        .HasForeignKey("IdLibrary")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Games.Domain.Entities.Game", b =>
                {
                    b.Navigation("GameLibraries");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("Games.Domain.Entities.GenreTypes", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("Games.Domain.Entities.Library", b =>
                {
                    b.Navigation("GameLibraries");
                });
#pragma warning restore 612, 618
        }
    }
}
